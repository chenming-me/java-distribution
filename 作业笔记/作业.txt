
选型前置环境：

公司技术架构陈旧（JDK5+Ibatis等），对公司新业务支持拖沓，响应慢。每当新需求上线，都会导致系统不稳定，轻则业务数据错乱，重则公司整体业务瘫痪停滞。
技术成了公司发展的瓶颈，为了支持未来公司业务的快速发展，保证业务更加稳定，决定对现有系统进行升级改造。


服务调度中间件dubbo选型


1.原有的dubbo只起到了注册和调度的基本功能，并没有深度使用。所以如果切换，对现有业务并没有太大影响。
2.dubbo






2.dubbo功能有限，我们在做持续集成自动部署时，需要深度改造dubbo代码，技术门槛高，业务代码和框架代码耦合。
        持续集成自动部署时，为什么要改造代码？
        由于我们的分布式项目之间调用关系复杂。需要假设有3个项目，A->B。如果我们这次的需求简单，我只需要先上B再上A，不会报错。但是如果B->A的话，不管先上哪个，都会报错
        

	
3.

